package nonlineargradientsui;

import java.awt.FlowLayout;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.io.BufferedReader;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JDialog;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;
import javax.swing.JPanel;
import javax.swing.SwingWorker.StateValue;


/**
 * Panel corresponding to the in silico-optimized gradient 
 * 
 * @author Luminita Moruz
 */
public class InsilicoDistributionPanel extends javax.swing.JPanel implements RTPanel {

    /**
     * Constructor
     */
    public InsilicoDistributionPanel() {
        initComponents();
        this.fileChooser = new JFileChooser();
        this.eludeTmpDir = System.getProperty("java.io.tmpdir");
        this.eludeErrFile = null;
        this.eludeOutFile = null;
        this.eludeLogFile = null;
        this.rtsToOptimize = new ArrayList<>();
        inputFieldsChanged = true;
        
        // add listeners
        eludePathTextField.getDocument().addDocumentListener(new TextFieldListener(this));
        trainingTextField.getDocument().addDocumentListener(new TextFieldListener(this));
        inSilicoTextField.getDocument().addDocumentListener(new TextFieldListener(this));
        proteinFastaTextField.getDocument().addDocumentListener(new TextFieldListener(this));
        minLenTextField.getDocument().addDocumentListener(new TextFieldListener(this));
        maxLenTextField.getDocument().addDocumentListener(new TextFieldListener(this));
        
        // create the pop-up window, but make it invisible
        Object[] options = {"Cancel Elude"};
        String message = "Runninng elude, this may take a few minutes...";
        pane = new JOptionPane(message, JOptionPane.PLAIN_MESSAGE, 
        JOptionPane.CANCEL_OPTION, null, options, options[0]);
        dialog = pane.createDialog(null, "Running Elude");
        dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        // put the button in the middle
        JPanel panel = (JPanel) pane.getComponent(1);
        panel.setLayout(new FlowLayout());
        dialog.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        uploadEludePathButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        eludePathTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        trainingTextField = new javax.swing.JTextField();
        uploadTrainingDataButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        inSilicoTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        uploadInsilicoButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        proteinFastaTextField = new javax.swing.JTextField();
        uploadFastaButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        minLenTextField = new javax.swing.JTextField();
        maxLenTextField = new javax.swing.JTextField();

        setMaximumSize(new java.awt.Dimension(570, 255));
        setMinimumSize(new java.awt.Dimension(570, 255));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(570, 255));
        setRequestFocusEnabled(false);
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Retention times to optimize", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        jPanel2.setMaximumSize(new java.awt.Dimension(560, 240));
        jPanel2.setMinimumSize(new java.awt.Dimension(560, 240));
        jPanel2.setPreferredSize(new java.awt.Dimension(560, 240));

        jLabel1.setText("Elude path");

        uploadEludePathButton.setText("Upload file");
        uploadEludePathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadEludePathButtonActionPerformed(evt);
            }
        });

        eludePathTextField.setText("/scratch/lumi_work/projects/gradient_design/GUI/NonlinearGradientsUI/data/insilico/elude-ubuntu-64");

        jLabel3.setText("Training peptides");

        trainingTextField.setText("/scratch/lumi_work/projects/gradient_design/GUI/NonlinearGradientsUI/data/insilico/training-peptides.txt");

        uploadTrainingDataButton.setText("Upload file");
        uploadTrainingDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadTrainingDataButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Theoretical peptides"));
        jPanel1.setMaximumSize(new java.awt.Dimension(527, 130));
        jPanel1.setMinimumSize(new java.awt.Dimension(527, 130));
        jPanel1.setPreferredSize(new java.awt.Dimension(527, 130));

        inSilicoTextField.setText("/scratch/lumi_work/projects/gradient_design/GUI/NonlinearGradientsUI/data/insilico/insilico-human-8-50.txt");

        jLabel4.setText("In silico peptides");

        uploadInsilicoButton.setText("Upload file");
        uploadInsilicoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadInsilicoButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("or");

        jLabel6.setText("Protein file (.fasta)");

        proteinFastaTextField.setText("/scratch/lumi_work/projects/gradient_design/GUI/NonlinearGradientsUI/data/insilico/sp_201209_human.fasta");

        uploadFastaButton.setText("Upload file");
        uploadFastaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadFastaButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Min peptide length");

        jLabel8.setText("Max peptide length");

        minLenTextField.setText("8");

        maxLenTextField.setText("50");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(inSilicoTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(proteinFastaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(uploadFastaButton)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(uploadInsilicoButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(minLenTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxLenTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(inSilicoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(uploadInsilicoButton))
                .addGap(5, 5, 5)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proteinFastaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(uploadFastaButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(minLenTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxLenTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(eludePathTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(trainingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(uploadTrainingDataButton)
                            .addComponent(uploadEludePathButton)))
                    .addComponent(jLabel2)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(eludePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uploadEludePathButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trainingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(uploadTrainingDataButton))
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(103, 103, 103))
        );

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 10, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The user can choose a file from the disk when the Browse button is pressed
     * @param evt 
     */
    private void uploadEludePathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadEludePathButtonActionPerformed
        int returnVal = this.fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            this.eludePathTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
        } 
    }//GEN-LAST:event_uploadEludePathButtonActionPerformed

    /**
     * The user can choose a file from the disk when the Browse button is pressed
     * @param evt 
     */
    private void uploadTrainingDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadTrainingDataButtonActionPerformed
        int returnVal = this.fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            this.trainingTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
        }
     }//GEN-LAST:event_uploadTrainingDataButtonActionPerformed

    /**
     * The user can choose a file from the disk when the Browse button is pressed
     * @param evt 
     */
    private void uploadInsilicoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadInsilicoButtonActionPerformed
        int returnVal = this.fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            this.inSilicoTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
        } 
    }//GEN-LAST:event_uploadInsilicoButtonActionPerformed

    /**
     * The user can choose a file from the disk when the Browse button is pressed
     * @param evt 
     */
    private void uploadFastaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadFastaButtonActionPerformed
        int returnVal = this.fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            this.proteinFastaTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
        } 
    }//GEN-LAST:event_uploadFastaButtonActionPerformed

    /**
     * Get the elude's path from the corresponding text field 
     * @return the absolute path of Elude (if the file exists)
     * @throws ValidationException if the file does not exist or it is not executable
     */
    private String getEludePath() throws ValidationException {
        String text = this.eludePathTextField.getText().trim();
        try {
            File f = new File(text);
            if (f.exists() && f.canExecute()) {
                return f.getAbsolutePath();             
            } else {
                throw new ValidationException("", "");
            }
        } 
        catch (Exception e) {
            String message = "Incorrect path to Elude. Please make sure you "
                    + "provided the correct path to Elude,\n"
                    + "and that the file is executable.";
            throw new ValidationException(message, "BAD_FILENAME");
        }
    }
    
   /**
    * Get the filename of the training peptides as given by the user 
    * @return The absolute path of the file (if the file exists)
    * @throws ValidationException 
    */ 
   private String getTrainingPeptides() throws ValidationException {
      String text = this.trainingTextField.getText().trim();
      try {
          Path path = Paths.get(text);
          File f = path.toFile();
          if (f.exists() && f.isFile()) {
              return f.getAbsolutePath();
          } else {
              throw new ValidationException("", "");
          }
      } 
      catch (Exception e) {
          String message = "Incorrect filename for the training peptides.";
          throw new ValidationException(message, "BAD_FILENAME");
      }
   }
 
   /**
    * Get the name of the fasta file provided by the user 
    * @return the path to the file (if the file exists)
    * @throws ValidationException 
    */
    private File getProteinFile() throws ValidationException {
        String text = this.proteinFastaTextField.getText().trim();
        try {
            Path path = Paths.get(text);
            File f = path.toFile();
            if (f.exists() && f.isFile()) {
                return f;
            } else {
                throw new ValidationException("", "");
            }
        } 
        catch (Exception e) {
            String message = "Incorrect protein filename.";
            throw new ValidationException(message, "BAD_FILENAME");
        }
    }
      
    /**
     * Get the minimum length of the peptide as filled in by the user in the 
     * text field 
     * @return minimum length of a peptide 
     * @throws ValidationException 
     */
    private int getMinLen() throws ValidationException {
        String text = this.minLenTextField.getText();
        try {
            int m = Integer.parseInt(text);
            return m;
        } 
        catch (Exception e) {
            String message = "The minimum length is not an integer number.";
            throw new ValidationException(message, "BAD_NUMBER");
        }
    }
     
    /**
     * Get the maximum length of the peptide as filled in by the user in the 
     * text field 
     * @return maximum length of a peptide 
     * @throws ValidationException 
     */
    private int getMaxLen() throws ValidationException {
        String text = this.maxLenTextField.getText();
        try {
            int M = Integer.parseInt(text);
            return M;
        } 
        catch (Exception e) {
            String message = "The maximum length is not an integer number.";
            throw new ValidationException(message, "BAD_NUMBER");
        }
    }
     
    /**
     * Get the name of the insilico file; This can either be a filename provided 
     * by the user, or a temporary file written after performing the insilico 
     * digestion  
     * @return Name of the file including theoretical peptides 
     * @throws ValidationException 
     */
    private String getInsilicoFile() throws ValidationException {
        String text = this.inSilicoTextField.getText().trim();
        if (text.trim().length() > 0) {
            Path path = Paths.get(text);
            File f = path.toFile();
            if (f.exists() && f.isFile()) {
                return path.toString();
            } else {                    
                throw new ValidationException("Incorrect filename for "
                        + "in silico peptides", "");
            }    
       } else {
            // get the insilico obtained by protein digestion 
            File fastaFile = getProteinFile();
            try {
                int minLen = getMinLen();
                int maxLen = getMaxLen();
                
                List<String> peptides = Protein.digestProteinsFasta(
                         fastaFile, true, minLen, maxLen);
                if (peptides.isEmpty()) {
                   throw new ValidationException("The in silico digestion resulted in no peptides. "
                            + "Please make sure all the parameters for digestion are set correctly.", "");
                } 
                String tmpDir = System.getProperty("java.io.tmpdir");
                String fname = "insilico-peptides.txt";
                File outFile = new File(tmpDir, fname);                           
                Protein.writeLinesToFile(peptides, outFile); 
                System.out.println("In silico digest written to: " 
                       + outFile.getAbsolutePath());
                return outFile.getAbsolutePath();
            }                
            catch (ValidationException e) {                    
               throw e;
            }
            catch (Exception e) {                    
               throw new ValidationException("Incorrect fasta file, unable to perform digestion.", "");
           }
       }          
    }
   
    /**
     * Load predicted retention times from ELude's output 
     * @param eludeOut name of the file including elude's predictions 
     * @return list of retention times 
     * @throws Exception 
     */
    public List<Float> getRT(String eludeOut) throws Exception {
        List<Float> rts = new ArrayList<Float>();
        BufferedReader br = new BufferedReader(new FileReader(eludeOut));
        String line;
        Float rt;
        
        br.readLine();
        br.readLine();
        br.readLine();
        line = br.readLine();
        while (line != null)  {
            rt = Float.parseFloat(line.split("\t")[1]);
            rts.add(rt);
            line = br.readLine();
        }            
        br.close();
        return rts;
    }

    /**
     * Get the retention times to be optimized (run elude in background, then load the 
     * retention times from its output file)
     * @return list of retention times values (in this case predictions from Elude)
     * @throws ValidationException 
     */
    @Override
    public List<Float> getRT() throws ValidationException {    
        if (!this.inputFieldsChanged) {
            return rtsToOptimize;
        }        
        rtsToOptimize.clear();
        // get the input data from the text Fields 
        String eludePath = getEludePath();
        String trainingPeptidesFile = getTrainingPeptides();
        String insilicoPeptidesFile = getInsilicoFile();        
     
        // make the output files for elude 
        String currentDateTime = "" + System.currentTimeMillis();
        eludeErrFile = Paths.get(eludeTmpDir).resolve(
                "elude-" + currentDateTime + ".err").toString(); 
        eludeLogFile = Paths.get(eludeTmpDir).resolve(
                "elude-" + currentDateTime + ".log").toString(); 
        eludeOutFile = Paths.get(eludeTmpDir).resolve(
                "elude-" + currentDateTime + ".out").toString();               
           
        //System.out.println(eludeErrFile);
        //System.out.println(eludeLogFile);
        //System.out.println(eludeOutFile);
        
        try {
            // prepare command line arguments & run Elude
            String[] commands = {eludePath, "-t", trainingPeptidesFile, "-e", 
                insilicoPeptidesFile, "-o", eludeOutFile, "-v", "5"};        
            EludeWorker eludeWorker = new EludeWorker(commands, eludeTmpDir, 
                    eludeErrFile, eludeLogFile);          
            // add listener to see when elude has ended           
            eludeWorker.addPropertyChangeListener(new PropertyChangeListener() {                
                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    switch (evt.getPropertyName()) {
                        case "state":
                            switch ((StateValue) evt.getNewValue()) {
                                case DONE:
                                    System.out.println("Elude is done (or canceled by user)");
                                    try {
                                        dialog.setVisible(false);
                                        rtsToOptimize = getRT(eludeOutFile);
                                    }
                                    catch (Exception e) {
                                        //System.out.println(e.getStackTrace());
                                    }
                                    break;
                            }
                        break;
                    }
                }
            });
            // run elude 
            eludeWorker.execute();
            
            // display the pop-up window
            dialog.setVisible(true);         
            String retVal = (String) pane.getValue();
            if (retVal.equals("Cancel Elude")) {
                eludeWorker.cancel(true);
                eludeWorker.destroyEludeProcess();
                rtsToOptimize.clear();
                return rtsToOptimize;
            }
            if (rtsToOptimize.isEmpty()) {
                throw new ValidationException("", "");
            }
            this.inputFieldsChanged = false;
            return rtsToOptimize;        
            
        } catch (Exception e) {
            //System.out.println("EXCEPTION");
            String message =  "Unable to run Elude. Please make sure that:\n";
            message += "  - the software is installed correctly.\n";
            message += "  - the paths to Elude, training peptides and insilico peptides/fasta file are correct.\n";
            message += "  - the training peptides file and the in silico/fasta files have the correct format\n";
            File f = new File(eludeErrFile);
            if (f.exists()) {
                message += "\nFor more details, please check " + eludeErrFile;
            }
            throw new ValidationException(message, "BAD_FILENAME");
        }
    }
       
    /**
     * Flag that some of the input fields were changed 
     * @param i 
     */
    @Override
    public void setInputFieldsChanged(boolean i) {
        this.inputFieldsChanged = i;
    }
    
     /**
     * Reset the retention time and flag that the input data has changed 
     */
    @Override
    public void resetRTs() {
        this.rtsToOptimize.clear();     
        this.inputFieldsChanged = true;      
    }
    
    public static void main(String [] args) throws Exception
    {
         Object[] options = {"Cancel Elude"};
         String message = "Runninng elude, this may take a few minutes.  Please do not close this window.";
         JOptionPane pane = new JOptionPane(message, JOptionPane.PLAIN_MESSAGE, 
                    JOptionPane.CANCEL_OPTION, null, options, options[0]);
         JPanel panel = (JPanel) pane.getComponent(1);
         panel.setLayout(new FlowLayout());
         
         System.out.println(pane.getComponent(0));
         System.out.println(pane.getComponent(1));
         
         
         JDialog dialog = pane.createDialog(null, "Running Elude");
         dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
         dialog.setVisible(true);    
    }
    
    // flag that the input data was changed in the text fields and thus elude need to 
    // be run again 
    private boolean inputFieldsChanged;
    final private JOptionPane pane; 
    final private JDialog dialog;
    // retention times to be optimized 
    private List<Float> rtsToOptimize;
    // directory and filenames for elude 
    private final String eludeTmpDir;
    private String eludeOutFile;
    private String eludeErrFile;
    private String eludeLogFile;
    final JFileChooser fileChooser;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField eludePathTextField;
    private javax.swing.JTextField inSilicoTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField maxLenTextField;
    private javax.swing.JTextField minLenTextField;
    private javax.swing.JTextField proteinFastaTextField;
    private javax.swing.JTextField trainingTextField;
    private javax.swing.JButton uploadEludePathButton;
    private javax.swing.JButton uploadFastaButton;
    private javax.swing.JButton uploadInsilicoButton;
    private javax.swing.JButton uploadTrainingDataButton;
    // End of variables declaration//GEN-END:variables
}