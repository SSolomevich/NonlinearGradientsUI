package nonlineargradientsui;

import java.awt.FlowLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingWorker;
import uk.ac.ebi.jmzml.xml.io.MzMLUnmarshaller;

/**
 * Panel corresponding to the MS1-optimized gradient 
 * 
 * @author Luminita Moruz
 */
public class MS1DistributionPanel extends javax.swing.JPanel implements RTPanel {

    public MS1DistributionPanel() {
        initComponents();               
        // initializations
        setMZIntervalDefault();
        this.absMinIntensity = true;
        this.mzmlFileChanged = true;
        this.unmarshaller = null;
        this.inputFieldsChanged = true;        
        this.fileChooser = new JFileChooser();
        this.rtDistrib = new ArrayList<>();
        // Initialize the pop-up window 
        Object[] options = {"Cancel"};
        String message;
        message = "Processing data from the mzML file, this may take a few minutes ...";
        pane = new JOptionPane(message, JOptionPane.PLAIN_MESSAGE, 
        JOptionPane.CANCEL_OPTION, null, options, options[0]);
        dialog = pane.createDialog(null, "Loading mzMl file");
        dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        // put the button in the middle
        JPanel panel = (JPanel) pane.getComponent(1);
        panel.setLayout(new FlowLayout());
        dialog.setVisible(false); 
        // add listeners to signal that the content of these textfields was altered 
        mzmlTextField.getDocument().addDocumentListener(new MzmlTextFieldListener(this));
        minAbsIntTextField.getDocument().addDocumentListener(new TextFieldListener(this));
        minPercIntTextField.getDocument().addDocumentListener(new TextFieldListener(this));
        minMzTextField.getDocument().addDocumentListener(new TextFieldListener(this));
        maxMzTextField.getDocument().addDocumentListener(new TextFieldListener(this));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        uploadMzmlButton = new javax.swing.JButton();
        mzmlTextField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        minAbsIntTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        minPercIntTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        diaOptimizeCheckbox = new javax.swing.JCheckBox();
        nTimePointsJLabel = new javax.swing.JLabel();
        nMZJLabel = new javax.swing.JLabel();
        minMzJLabel = new javax.swing.JLabel();
        maxMzJLabel = new javax.swing.JLabel();
        npointsTextField = new javax.swing.JTextField();
        nMzWindowsTextField = new javax.swing.JTextField();
        minMzTextField = new javax.swing.JTextField();
        maxMzTextField = new javax.swing.JTextField();

        setMaximumSize(new java.awt.Dimension(570, 255));
        setMinimumSize(new java.awt.Dimension(570, 255));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(570, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Retention times to optimize", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        jPanel2.setMaximumSize(new java.awt.Dimension(560, 240));
        jPanel2.setMinimumSize(new java.awt.Dimension(560, 240));
        jPanel2.setPreferredSize(new java.awt.Dimension(560, 240));

        jLabel1.setText("Spectral data (.mzml)");

        uploadMzmlButton.setText("Upload file");
        uploadMzmlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadMzmlButtonActionPerformed(evt);
            }
        });

        mzmlTextField.setText("/scratch/lumi_work/projects/gradient_design/java/NonlinearGradientsUI/data/ms1/20130604_OT-XL_U3000-BETA_500ng_Hela_02_centroided.mzML");
        mzmlTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mzmlTextFieldActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Retention times to optimize", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        jPanel3.setMaximumSize(new java.awt.Dimension(527, 175));
        jPanel3.setMinimumSize(new java.awt.Dimension(527, 175));
        jPanel3.setPreferredSize(new java.awt.Dimension(527, 175));

        jLabel6.setText("Peak intensity above");

        minAbsIntTextField.setText("50000");

        jLabel4.setText("or");

        jLabel5.setText("Peak intensity above");

        minPercIntTextField.setText("10");
        minPercIntTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minPercIntTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("% of maximum intensity");

        diaOptimizeCheckbox.setText("Optimize DIA m/z windows");
        diaOptimizeCheckbox.setActionCommand("");
        diaOptimizeCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                diaOptimizeCheckboxActionPerformed(evt);
            }
        });

        nTimePointsJLabel.setText("Number of time points");
        nTimePointsJLabel.setEnabled(false);

        nMZJLabel.setText("Number of m/z windows");
        nMZJLabel.setEnabled(false);

        minMzJLabel.setText("Minimum m/z");
        minMzJLabel.setEnabled(false);

        maxMzJLabel.setText("Maximum m/z");
        maxMzJLabel.setEnabled(false);

        npointsTextField.setEnabled(false);

        nMzWindowsTextField.setEnabled(false);

        minMzTextField.setEnabled(false);

        maxMzTextField.setEnabled(false);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nMZJLabel)
                    .addComponent(nTimePointsJLabel))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(nMzWindowsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(npointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minMzJLabel)
                    .addComponent(maxMzJLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minMzTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxMzTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(minAbsIntTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(minPercIntTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(2, 2, 2)
                                .addComponent(jLabel2))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(diaOptimizeCheckbox)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minAbsIntTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(minPercIntTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(diaOptimizeCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nTimePointsJLabel)
                    .addComponent(npointsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minMzJLabel)
                    .addComponent(minMzTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nMZJLabel)
                    .addComponent(nMzWindowsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxMzJLabel)
                    .addComponent(maxMzTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(28, 28, 28)
                        .addComponent(mzmlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uploadMzmlButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(mzmlTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uploadMzmlButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.getAccessibleContext().setAccessibleName("Minimum intensity of MS1 peaks");

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 10, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Set the default values for the minimum and maximum m/z when optimizing DIA windows
     */
    private void setMZIntervalDefault() {
        this.minMz = this.DEFAULT_MIN_MZ;
        this.maxMz = this.DEFAULT_MAX_MZ;
    }
    
    /**
     * Choose the .mzml file from the disk; set the path of the chosen 
     * in the corresponding text field
     * @param evt 
     */
    private void uploadMzmlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadMzmlButtonActionPerformed
        int returnVal = this.fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            this.mzmlTextField.setText(fileChooser.getSelectedFile().getAbsolutePath());
        } 
    }//GEN-LAST:event_uploadMzmlButtonActionPerformed

    private void minPercIntTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minPercIntTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minPercIntTextFieldActionPerformed

    /**
     * Set the enabled property of all the DIA components equal to enabled 
     * @param enabled flags whether the DIA-related fields should be enabled 
     */
    private void setDIAFields(boolean enabled) {
        // make the labels gray
        this.minMzJLabel.setEnabled(enabled);
        this.maxMzJLabel.setEnabled(enabled);
        this.nMZJLabel.setEnabled(enabled);
        this.nTimePointsJLabel.setEnabled(enabled);
        // set the text fields 
        this.nMzWindowsTextField.setEnabled(enabled);
        this.npointsTextField.setEnabled(enabled);
        this.maxMzTextField.setEnabled(enabled);
        this.minMzTextField.setEnabled(enabled);
    }
    
    /**
     * Enable and disable the DIA-related components when the checkbox is 
     * checked/unchecked
     * @param evt 
     */
    private void diaOptimizeCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diaOptimizeCheckboxActionPerformed
        JCheckBox source = (JCheckBox) evt.getSource();
        if (source.isSelected()) {
            this.setDIAFields(true);
            this.setInputFieldsChanged(true);
            
        } else {
            this.setDIAFields(false);   
            this.setMZIntervalDefault();
            this.setInputFieldsChanged(true);
        }
    }//GEN-LAST:event_diaOptimizeCheckboxActionPerformed

    private void mzmlTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mzmlTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mzmlTextFieldActionPerformed

    /**
     * Get the minimum intensity value from the text fields
     * Notes:
     * - if the first textField is empty, the value from the second one is returned 
     * Otherwise the value from the first text field is always returned. The 
     * variable absMinIntensity is set accordingly.      
     * @return
     * @throws ValidationException 
     */
    private double getMinIntensity() throws ValidationException {
        String minAbsIntensityText = this.minAbsIntTextField.getText();
        String message;
        double minInt = 0.0;
        if (minAbsIntensityText.trim().length() == 0) {
            minAbsIntensityText = this.minPercIntTextField.getText();
            if (minAbsIntensityText.trim().length() == 0) {
                message = "Please fill in a minimum intensity value.";
                throw new ValidationException(message, "BAD_NUMBER");
            } else {
                try {
                    minInt = Double.parseDouble(minAbsIntensityText);
                    if (minInt < 0 || minInt > 100) {
                        message = "The peak intensity need to be between "
                                + "0 to 100% of the maximum peak intensity";
                        throw new ValidationException(message, "BAD_NUMBER");
                    } 
                    this.absMinIntensity = false;
                    return minInt;
                }
                catch (NumberFormatException ne) {
                    message = "The minimum intensity value" + minAbsIntensityText + 
                            " cannot be parsed as a valid number.";
                    throw new ValidationException(message, "BAD_NUMBER");
                }
            }
        } else {
            try {
                minInt = Double.parseDouble(minAbsIntensityText);
                this.absMinIntensity = true;
                return minInt;
             }
             catch (NumberFormatException ne) {
                    message = "The minimum intensity value" + minAbsIntensityText + 
                            "cannot be parsed as a valid number.";
                    throw new ValidationException(message, "BAD_NUMBER");
              }
        }
    }
    
    /**
     * Get the name of the mzml file from the text field.
     * @return Path of the mzml file
     * @throws ValidationException - if the path is empty, or it is not an 
     * existant file, it throws this exception 
     */
    private String getMzmlFileName() throws ValidationException {
        String text = this.mzmlTextField.getText().trim();
        if (text.trim().length() > 0) {
            Path path = Paths.get(text);
            File f = path.toFile();
            if (f.exists() && f.isFile()) {
                return path.toString();
            } else {                    
                throw new ValidationException("Incorrect mzMl filename.",
                "BAD_FILENAME");
            }    
        }
        else {
            throw new ValidationException("Incorrect mzMl filename.",
                    "BAD_FILENAME");
        }
    }    
    
    /**
     * Extract the retention times to be optimized from the data 
     * @return
     * @throws ValidationException 
     */
    @Override
    public List<Float> getRT() throws ValidationException {
        if (!this.mzmlFileChanged && !this.inputFieldsChanged) {
            return NFeaturesRT.getFullRTDistrib(rtDistrib); 
        }
        
        try {
            this.rtDistrib.clear();            
            // Get the minimum intensity and the DIA parameters 
            double intensityThreshold = getMinIntensity();
            if (mzOptimization()) {
                this.minMz = this.getDiaMinMz();
                this.maxMz = this.getDiaMaxMz();
            }           
            // Get a swing worker to do the .mzml manipulation in background 
            final MzmlWorker mzmlWorker;
            if (this.mzmlFileChanged) {                
                // Get the mzml filename if the text field with the mzml file was altered 
                this.unmarshaller = null;
                String mzml = getMzmlFileName();                    
                mzmlWorker = new MzmlWorker(mzml, intensityThreshold, 
                    this.absMinIntensity, this.minMz, this.maxMz);          
            } else {
                mzmlWorker = new MzmlWorker(this.unmarshaller, intensityThreshold, 
                    this.absMinIntensity, this.minMz, this.maxMz); 
            }
            // add listener to see when the worker has ended           
            mzmlWorker.addPropertyChangeListener(new PropertyChangeListener() {                
                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    switch (evt.getPropertyName()) {
                        case "state":
                            switch ((SwingWorker.StateValue) evt.getNewValue()) {
                                case DONE:
                                    //System.out.println("Mzml processing is done");
                                    try {
                                        dialog.setVisible(false);
                                        rtDistrib = mzmlWorker.get();
                                        unmarshaller = mzmlWorker.getUnmarshaller();
                                    }
                                    catch (Exception e) {
                                        System.out.println(e.getStackTrace());
                                    }
                                    break;
                            }
                        break;
                    }
                }
            });
            // run the worker 
            mzmlWorker.execute();  
            // display the pop-up window
            // System.out.println("Main thread after the mzml worker");
            dialog.setVisible(true);         
            String retVal = (String) pane.getValue();
            System.out.println(retVal);
            if (retVal.equals("Cancel")) {
                mzmlWorker.cancel(true);               
                unmarshaller = null;
                return new ArrayList<>();
            }
            if (rtDistrib.isEmpty()) {
                throw new ValidationException("No retention times were loaded from the .mzml. "
                        + "\nPlease make sure the mzml filename is correct, and that the intensity "
                        + "threshold is not too high.", "UNKNOWN_ERROR");
            }            
           
            // set the input fields as unmodified 
            if (this.unmarshaller != null) {
                this.mzmlFileChanged = false;
            } 
            this.inputFieldsChanged = false;
            
            // return the full RT distribution
            return NFeaturesRT.getFullRTDistrib(rtDistrib);                  
        } catch (Exception e) {
            String message;
            if (!(e instanceof ValidationException)) {
                System.out.println("EXCEPTION");
                message =  "Unable to process mzML file. Please make sure the file "
                    + "has the correct format and try again.";
            } else {
                message = e.getMessage();
            }
            throw new ValidationException(message, "BAD_FILENAME");
        }
    }
    
    /**
     * Sets the flag which records whether the fields including the input data were modified      * 
     * @param b value of the flag 
     */
    @Override
    public void setInputFieldsChanged(boolean b) {
        this.inputFieldsChanged = b;
    }
    
    /**
     * Sets the flag which records whether the field of the mzml filename was modified
     * @param b value of the flag 
     */
    public void setMzmlFieldChanged(boolean b) {
        this.mzmlFileChanged = b;
    }
                    
    /**
     * Check if the DIA optimization checkBox is selected
     * @return true if the DIA optimization checkbox is selected, false otherwise 
     */
    public boolean mzOptimization() {
        return this.diaOptimizeCheckbox.isSelected();
    }
    
    /**
     * Get the number of time points for DIA optimization of mz windows 
     * @return Number of time points filled by the user 
     * @throws ValidationException 
     */
    public int getDiaNTimePoints() throws ValidationException {
        String n = this.npointsTextField.getText();
        try {
            int nt = Integer.parseInt(n);
            if (nt < 0) {
                throw new Exception();
            }
            return nt;
        }
        catch (Exception e) {
            String message = "The number of time points for DIA mz optimization needs to be a positive integer";
            throw new ValidationException(message, "BAD_NUMBER");
        }        
    }
    
    /**
     * Get the number of m/z windows for DIA optimization of mz windows 
     * @return Number of m/z windows filled by the user 
     * @throws ValidationException 
     */
    public int getDiaNMzWindows() throws ValidationException {
        String n = this.nMzWindowsTextField.getText();
        try {
            int nt = Integer.parseInt(n);
            if (nt <= 1) {
                throw new Exception();
            }
            return nt;
        }
        catch (Exception e) {
            String message = "The number of m/z windows for DIA mz optimization"
                    + " needs to be a positive integer larger than 1. ";
            throw new ValidationException(message, "BAD_NUMBER");
        }        
    }
    
    /**
     * Get the minimum m/z for DIA optimization of mz windows 
     * @return Minimum m/z filled  by the user 
     * @throws ValidationException 
     */
    public double getDiaMinMz() throws ValidationException {
        String m = this.minMzTextField.getText();
        try {
            double minMz = Double.parseDouble(m);
            if (minMz < 0) {
                throw new Exception();
            }
            return minMz;
        }
        catch (Exception e) {
            String message = "The minimum m/z for DIA mz optimization"
                    + " needs to be a positive number";
            throw new ValidationException(message, "BAD_NUMBER");
        }        
    }
    
   
     /**
     * Get the maximum m/z for DIA optimization of mz windows 
     * @return Maximum m/z filled  by the user 
     * @throws ValidationException 
     */
    public double getDiaMaxMz() throws ValidationException {
        String m = this.maxMzTextField.getText();
        try {
            double maxMz = Double.parseDouble(m);
            if (maxMz < 0) {
                throw new Exception();
            }
            return maxMz;
        }
        catch (Exception e) {
            String message = "The maximum m/z for DIA mz optimization"
                    + " needs to be a positive number";
            throw new ValidationException(message, "BAD_NUMBER");
        }        
    }
    
    /**
     * Get the list of features loaded from the mzml file (only those above the 
     * intensity threshold are considered)
     * @return 
     */
    public List<NFeaturesRT> getRtDistrib() {
        return this.rtDistrib;
    }
    
    /**
     * Reset the retention time and flag that the input data has changed 
     */
    @Override
    public void resetRTs() {
        this.rtDistrib.clear();     
        this.inputFieldsChanged = true;
        this.mzmlFileChanged = true;
    }
    
    // minimum and maximum m/z of the features to take into account
    double minMz;
    double maxMz;
    final double DEFAULT_MIN_MZ = 0;
    final double DEFAULT_MAX_MZ = 1e9; 
    // retention time distribution to be optimized
    List<NFeaturesRT> rtDistrib; 
    // unmarsheller for the .mzml file 
    MzMLUnmarshaller unmarshaller;
    // Whether the minimum intensity is given as absolute value
    private boolean absMinIntensity;    
    // True if the user has made changes in the text field for the .mzml file 
    private boolean mzmlFileChanged;             
    // True if other parameters were changed, requiring to recalculate the features 
    private boolean inputFieldsChanged;                 
    // Used to open the dialog to cancel loading the MS1 file
    final private JOptionPane pane;     
    final private JDialog dialog;
    // Used to allow choosing an .mzml file from the disk
    final JFileChooser fileChooser;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox diaOptimizeCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel maxMzJLabel;
    private javax.swing.JTextField maxMzTextField;
    private javax.swing.JTextField minAbsIntTextField;
    private javax.swing.JLabel minMzJLabel;
    private javax.swing.JTextField minMzTextField;
    private javax.swing.JTextField minPercIntTextField;
    private javax.swing.JTextField mzmlTextField;
    private javax.swing.JLabel nMZJLabel;
    private javax.swing.JTextField nMzWindowsTextField;
    private javax.swing.JLabel nTimePointsJLabel;
    private javax.swing.JTextField npointsTextField;
    private javax.swing.JButton uploadMzmlButton;
    // End of variables declaration//GEN-END:variables
}
